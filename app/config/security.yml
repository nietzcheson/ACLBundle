# # you can read more about security in the related section of the documentation
# # http://symfony.com/doc/current/book/security.html
# security:
#     # http://symfony.com/doc/current/book/security.html#encoding-the-user-s-password
#     encoders:
#         Symfony\Component\Security\Core\User\User: plaintext
#
#     # http://symfony.com/doc/current/book/security.html#hierarchical-roles
#     role_hierarchy:
#         ROLE_ADMIN:       ROLE_USER
#         ROLE_SUPER_ADMIN: [ROLE_USER, ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
#
#     # http://symfony.com/doc/current/book/security.html#where-do-users-come-from-user-providers
#     providers:
#         in_memory:
#             memory:
#                 users:
#                     user:  { password: userpass, roles: [ 'ROLE_USER' ] }
#                     admin: { password: adminpass, roles: [ 'ROLE_ADMIN' ] }
#
#     # the main part of the security, where you can set up firewalls
#     # for specific sections of your app
#     firewalls:
#         # disables authentication for assets and the profiler, adapt it according to your needs
#         dev:
#             pattern:  ^/(_(profiler|wdt)|css|images|js)/
#             security: false
#         # the login page has to be accessible for everybody
#         demo_login:
#             pattern:  ^/demo/secured/login$
#             security: false
#
#         # secures part of the application
#         demo_secured_area:
#             pattern:    ^/demo/secured/
#             # it's important to notice that in this case _demo_security_check and _demo_login
#             # are route names and that they are specified in the AcmeDemoBundle
#             form_login:
#                 check_path: _demo_security_check
#                 login_path: _demo_login
#             logout:
#                 path:   _demo_logout
#                 target: _demo
#             #anonymous: ~
#             #http_basic:
#             #    realm: "Secured Demo Area"
#
#     # with these settings you can restrict or allow access for different parts
#     # of your application based on roles, ip, host or methods
#     # http://symfony.com/doc/current/cookbook/security/access_control.html
#     access_control:
#         #- { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }

# app/config/security.yml
security:

    firewalls:
        login:
            pattern:    ^/login$
            anonymous: ~

        secured_area:
            pattern:    ^/
            form_login:
              login_path:  login
              check_path:  login_check
              csrf_provider: form.csrf_provider
            logout: ~

    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }

        # Descomenta la siguiente línea para proteger también
        # la propia URL /admin
        # - { path: ^/admin$, roles: ROLE_ADMIN }

    providers:
      chain_provider:
        chain:
          #providers: ["in_memory", "user_provider", "user_db"]
          providers: ["in_memory", "user_provider"]

      in_memory:
          memory:
              users:
                  ryan:  { password: 7110eda4d09e062aa5e4a390b0a572ac0d2c0220, roles: 'ROLE_USER' }
                  # foo
                  test: { password: f7fbba6e0636f890e56fbbf3283e524c6fa3204ae298382d624741d0dc6638326e282c41be5e4254d8820772c5518a2c5a8c0c7f7eda19594a7eb539453e1ed7, roles: 'ROLE_ADMIN' }

      user_provider:
            id: user_provider

      # user_db:
      #   entity: { class: ACL\ACLBundle\Entity\User, property: username }

    encoders:
        Symfony\Component\Security\Core\User\User:
            algorithm:   sha512
            iterations: 1
            encode_as_base64: false

        # ACL\ACLBundle\Service\User:
        #     algorithm:        sha512
        #     encode_as_base64: false
        #     iterations:       3

        ACL\ACLBundle\Entity\User:
            algorithm:        sha512
            encode_as_base64: false
            iterations:       3
